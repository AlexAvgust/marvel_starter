{"version":3,"file":"static/js/982.652870db.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SinglePage.jsx","services/MarvelService.jsx","components/hooks/http.hook.js"],"sourcesContent":["import Error from './error.gif'\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{\r\n            display: 'block', width: '250px', height: '250px',\r\n            objectFit: 'contain', margin: '0 auto'\r\n        }} alt='Error' src={Error} />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useParams, Link } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport './singleComic.scss'\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport { Helmet } from 'react-helmet';\nconst SingleComicPage = (props) => {\n    const { type } = props\n    console.log(type)\n    const { loading, error, getComic, getCharacter, clearError } = useMarvelService()\n    const { id } = useParams()\n    console.log(id)\n    const [item, setItem] = useState()\n\n    const updateData = () => {\n        clearError()\n        switch (type) {\n            case 'comic':\n                getComic(id)\n                    .then(res => setItem(res))\n                break\n            case 'character':\n                getCharacter(id)\n                    .then(res => setItem(res))\n                break\n        }\n\n    }\n\n\n    useEffect(() => {\n        updateData()\n\n    }, [id])\n\n    const errorMessage = error ? <ErrorMessage /> : null\n    const spinner = loading ? <Spinner /> : null\n    const content = !(loading || error || !item) ? <View props={item} type={type} /> : null;\n    return (\n        <div className=\"single-comic\">\n             \n            {errorMessage}\n            {spinner}\n            {content}\n\n        </div>\n    )\n}\n\n\n\nconst View = ({ props ,type  }) => {\n\n    const { title, name,description, homepage, pageCount, thumbnail, language, price } = props;\n\n    return (\n        <div className=\"single-comic\">\n               <Helmet>\n            <meta name=\"description\" \n            content=\"Page with our comics\"/>\n            <title>{type === 'comic' ? title : name}</title>\n        </Helmet>\n            <img src={thumbnail} alt={title} className=\"single-comic__img\" />\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{title ? title : name}</h2>\n\n                <p className=\"single-comic__descr\">{description}</p>\n\n                {homepage ? <a className='button button__main' style={{ \"marginTop\": \"30px\" }} href={homepage}>\n                    <div className='inner'>HOMEPAGE</div>\n                    </a> :\n                    <p className=\"single-comic__descr\">{pageCount}</p>}\n\n                {language ? <p className=\"single-comic__descr\">Language: {language}</p> : null}\n                 \n                <div className=\"single-comic__price\">{price}</div>\n            </div>\n            {type === 'comic' ? <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link> :\n            <Link to='/' className=\"single-comic__back\">Back to all</Link>}\n        </div>\n    )\n}\nexport default SingleComicPage;","import { useHttp } from \"../components/hooks/http.hook\"\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp()\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = 'apikey=c3d6f2e6f2f4c9629c244eb5f5200d37'\r\n    const _baseOffset = 210\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n    const getCharacter = async (id) => {\r\n\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        console.log(res)\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics)\r\n    } \r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'No description :(',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return {loading,error,clearError,getAllCharacters,getCharacter,getAllComics,getComic,getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const request = useCallback(async (url, method = 'GET',\r\n        body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n            setLoading(true)\r\n\r\n            try {\r\n                const response = await fetch (url, {method, body,headers})\r\n                if(!response.ok){\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n                }\r\n\r\n                const data = await response.json()\r\n                setLoading(false)\r\n                return data\r\n            } catch(e) {\r\n                setLoading(false)\r\n                setError(e.message)\r\n                throw e\r\n            }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null),[])\r\n\r\n    return {loading,request,error,clearError}\r\n}"],"names":["style","display","width","height","objectFit","margin","alt","src","Error","View","props","type","title","name","description","homepage","pageCount","thumbnail","language","price","className","Helmet","content","href","to","console","log","useMarvelService","loading","error","getComic","getCharacter","clearError","id","useParams","useState","item","setItem","useEffect","then","res","updateData","errorMessage","ErrorMessage","spinner","Spinner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","results","map","_transformCharacter","getCharacterByName","getAllComics","_transformComics","char","slice","path","extension","urls","wiki","comics","items","textObjects","prices"],"sourceRoot":""}