{"version":3,"file":"static/js/742.ab0323fb.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/findChar/FindChar.jsx","components/pages/MainPage.jsx","services/MarvelService.jsx","components/hooks/http.hook.js"],"sourcesContent":["import Error from './error.gif'\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{\r\n            display: 'block', width: '250px', height: '250px',\r\n            objectFit: 'contain', margin: '0 auto'\r\n        }} alt='Error' src={Error} />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport './randomChar.scss';\r\n\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({})\r\n\r\n\r\n    const { loading, error, getCharacter, clearError } = useMarvelService()\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [])\r\n\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError()\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\r\n            getCharacter(id)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null\r\n    const spinner = loading ? <Spinner /> : null\r\n    const content = !(loading || error) ? <View char={char} /> : null\r\n\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = char\r\n\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}                        </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useEffect, useState, useRef } from 'react';\r\n\r\nimport './charList.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\nconst CharList = (props) => {\r\n\r\n    const [chars, setChars] = useState([])\r\n    const [newItemLoading, setNewItemLoading] = useState(false)\r\n    const [offset, setOffset] = useState(210)\r\n    const [charEnded, setCharEnded] = useState(false)\r\n\r\n    const {loading,error,getAllCharacters} = useMarvelService()\r\n\r\n\r\n    useEffect(() => {\r\n        onRequest(offset,true)\r\n    }, [])\r\n\r\n    const onRequest = (offset,initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\r\n        getAllCharacters(offset)\r\n            .then(onCharsLoaded)\r\n    }\r\n\r\n    const onCharsLoaded = (newChars) => {\r\n        let ended = false\r\n        if (newChars.length < 9) {\r\n            ended = true\r\n        }\r\n        setChars(chars => [...chars, ...newChars])\r\n        setNewItemLoading(false)\r\n        setOffset(offset => offset + 9)\r\n        setCharEnded(charEnded => ended)\r\n\r\n    }\r\n\r\n\r\n\r\n    const itemsRefs = useRef([]);\r\n\r\n\r\n\r\n    const focusOnItem = (id) => {\r\n        itemsRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemsRefs.current[id].classList.add('char__item_selected');\r\n\r\n    }\r\n    function renderCharacters(chars) {\r\n\r\n\r\n\r\n        const items = chars.map((el, i) => {\r\n            let imgStyle = { 'objectFit': 'cover' }\r\n            if (el.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = { 'objectFit': 'unset' };\r\n            }\r\n\r\n\r\n            return (\r\n                <li tabIndex={0}\r\n                    ref={el => itemsRefs.current[i] = el}\r\n                    key={el.id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(el.id)\r\n                        focusOnItem(i)\r\n                    }}\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === 'Enter' || e.key === ' ') {\r\n                            props.onCharSelected(el.id)\r\n                            focusOnItem(i)\r\n                        }\r\n                    }}\r\n                    className=\"char__item\" >\r\n\r\n                    <img style={imgStyle}\r\n                        src={el.thumbnail}\r\n                        alt={el.name} />\r\n\r\n                    <div className=\"char__name\">\r\n                        {el.name}\r\n                    </div>\r\n                </li>\r\n\r\n            )\r\n        })\r\n        return items\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const items = renderCharacters(chars)\r\n\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n\r\n            <ul className=\"char__grid\">\r\n                {items}\r\n\r\n            </ul>\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                onClick={() => onRequest(offset)}\r\n                style={{ display: charEnded ? 'none' : 'block' }}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import useMarvelService from '../../services/MarvelService';\r\nimport { useState,useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton'\r\nimport './charInfo.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null)\r\n\r\n    const {loading,error,getCharacter,clearError} = useMarvelService()\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    },[props.charId])\r\n\r\n\r\n    const updateChar = () => {\r\n        const { charId } = props\r\n        if (!charId) {\r\n            return\r\n        }\r\n        clearError()\r\n            getCharacter(charId)\r\n            .then(onCharLoaded)    \r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n        const skeleton = char || loading || error ? null : <Skeleton />\r\n        const errorMessage = error ? <ErrorMessage /> : null\r\n        const spinner = loading ? <Spinner /> : null\r\n        const content = !(loading || error || !char) ? <View char={char} /> : null\r\n\r\n        return (\r\n            <div className=\"char__info\">\r\n                {skeleton}\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n         \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nconst View = ({char}) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = char\r\n    let imgStyle = { 'objectFit': 'cover' }\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = { 'objectFit': 'unset' };\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img style={imgStyle} src={thumbnail} alt={name} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {\r\n\r\n                    (comics.length > 0) ? comics.slice().splice(10, comics.length).map((el, i) => {\r\n                        let comicId = comics[i].resourceURI.slice(-5).replace(/\\D/,'')\r\n                        return (\r\n                            <Link to={`/comics/${comicId}`} key={i} className=\"char__comics-item\">\r\n                                {el.name}\r\n                            </Link>\r\n                        )\r\n                    }) : 'There is no comics with this character'\r\n                }\r\n\r\n\r\n\r\n\r\n            </ul>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state= {\r\n        error:false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error){\r\n    //     return {error: true}\r\n    // }\r\n\r\n    componentDidCatch(error,errorInfo){\r\n        console.log(error,errorInfo)\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n\r\n    render(){\r\n        if(this.state.error){\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundary","import { Form, Formik, Field, ErrorMessage as FormikErrorMessage } from 'formik'\nimport { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport useMarvelService from '../../services/MarvelService'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\nimport * as Yup from 'yup';\nimport './findChar.scss' \n\n\nconst FindChar = () => {\n\n  const [char, setChar] = useState(null)\n  const { loading, error, getCharacterByName, clearError } = useMarvelService()\n\nconsole.log(char)\n  const onCharLoaded = (char) => {\n    setChar(char)\n  }\n\n  const updateChar = (name) => {\n    clearError()\n\n    getCharacterByName(name)\n    .then(onCharLoaded)\n\n  }\n\n  const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n  const result =!char ? null :\n    <div className=\"char__search-wrapper\">\n      <div className=\"char__search-success\">There is! Visit {char.name} page?</div>\n      <Link to={`/characters/${char.id}`} className=\"button button__secondary\">\n        <div className=\"inner\">To page</div>\n      </Link>\n    </div> \n\n  return (\n    <div  className=\"char__search-form\">\n      <Formik initialValues={{\n        name: ''\n      }}\n      validationSchema = {Yup.object({\n        name: Yup.string().required('This field is required')\n    })}\n    onSubmit = { ({name}) => {\n      updateChar(name);\n  }}>\n\n        <Form>\n          <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n          <div className=\"char__search-wrapper\">\n\n            <Field type=\"text\" name=\"name\" placeholder=\"Enter name\" />\n\n            <button className='button button__main' type=\"submit\" disabled={loading}>\n              <div className='inner'>Find</div>\n            </button>\n          </div>\n          <FormikErrorMessage className=\"char__search-error\" name=\"name\" component=\"div\" />\n        </Form>\n\n      </Formik>\n      {result}\n      {errorMessage}\n    </div>\n  )\n}\n\nexport default FindChar","import { useState } from \"react\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport decoration from '../../resources/img/vision.png';\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport FindChar from \"../findChar/FindChar\";\nimport { Helmet } from \"react-helmet\";\nconst MainPage = () => {\n\n    const [selectedChar, setSlectedChar] = useState(null)\n\n    const onCharSelected = (id) => {\n        setSlectedChar(id)\n    }\n    \n    return (\n        <>\n        <Helmet>\n            <meta name=\"description\" />\n            <title>Marvel information</title>\n        </Helmet>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\"> \n           \n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n           <div>\n\n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar} />\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <FindChar/>\n                </ErrorBoundary>\n           </div>\n               \n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    )\n}\n\nexport default MainPage","import { useHttp } from \"../components/hooks/http.hook\"\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp()\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = 'apikey=c3d6f2e6f2f4c9629c244eb5f5200d37'\r\n    const _baseOffset = 210\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n    const getCharacter = async (id) => {\r\n\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        console.log(res)\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics)\r\n    } \r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'No description :(',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return {loading,error,clearError,getAllCharacters,getCharacter,getAllComics,getComic,getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const request = useCallback(async (url, method = 'GET',\r\n        body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n            setLoading(true)\r\n\r\n            try {\r\n                const response = await fetch (url, {method, body,headers})\r\n                if(!response.ok){\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n                }\r\n\r\n                const data = await response.json()\r\n                setLoading(false)\r\n                return data\r\n            } catch(e) {\r\n                setLoading(false)\r\n                setError(e.message)\r\n                throw e\r\n            }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null),[])\r\n\r\n    return {loading,request,error,clearError}\r\n}"],"names":["style","display","width","height","objectFit","margin","alt","src","Error","View","char","name","description","thumbnail","homepage","wiki","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","chars","setChars","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharsLoaded","newChars","ended","length","itemsRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","items","map","el","i","imgStyle","tabIndex","ref","onCharSelected","onKeyPress","e","key","renderCharacters","disabled","comics","slice","splice","comicId","resourceURI","replace","to","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","getCharacterByName","result","initialValues","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","selectedChar","setSlectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","message","useHttp","_apiBase","_apiKey","res","results","_transformCharacter","getAllComics","_transformComics","getComic","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}