{"version":3,"file":"static/js/955.ec2d1d45.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.jsx","services/MarvelService.jsx","components/hooks/http.hook.js"],"sourcesContent":["import Error from './error.gif'\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{\r\n            display: 'block', width: '250px', height: '250px',\r\n            objectFit: 'contain', margin: '0 auto'\r\n        }} alt='Error' src={Error} />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './comicsList.scss';\r\nconst ComicsList = () => {\r\n\r\n\r\n\r\n    const [comicsList, setComicsList] = useState([])\r\n    const [newItemLoading, setNewItemLoading] = useState(false)\r\n    const [offset, setOffset] = useState(0)\r\n    const [comicsEnded, setComicsEnded] = useState(false)\r\n\r\n    const { loading, error, getAllComics } = useMarvelService()\r\n    const onComicsLoaded = (newComicsList) => {\r\n        let ended = false\r\n        if (newComicsList.length < 8) {\r\n            ended = true\r\n        }\r\n        setComicsList([...comicsList, ...newComicsList])\r\n        setNewItemLoading(false)\r\n        setOffset(offset + 8)\r\n        setComicsEnded(ended)\r\n\r\n    }\r\n\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\r\n        getAllComics(offset)\r\n            .then(onComicsLoaded)\r\n    }\r\n    useEffect(() => {\r\n        onRequest(offset, true)\r\n    }, [])\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            return (\r\n                <li className='comics__item' key={i}>\r\n                    <Link to={`${item.id}`}>\r\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\r\n                        <div className='comics__item-name'>{item.title}</div>\r\n                        <div className='comics__item-price'>{item.price}</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        })\r\n        return (\r\n            <ul className='comics__grid'>\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(comicsList)\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null\r\n\r\n    return (\r\n        <div className='comics__list'>\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button\r\n                disabled={newItemLoading}\r\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}>\r\n                <div className='inner'>load More  </div>\r\n            </button>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\nimport AppBanner from \"../appBanner/AppBanner\";\nimport ComicsList from '../comicsList/ComicsList'\n\nconst ComicsPage = () => {\n\n    return (\n        <>\n          <Helmet>\n            <meta name=\"description\" \n            content=\"Page with our comics\"/>\n            <title>Comics page</title>\n        </Helmet>\n        <AppBanner />\n        <ComicsList />\n    </>\n    )\n}\n\nexport default ComicsPage","import { useHttp } from \"../components/hooks/http.hook\"\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp()\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = 'apikey=c3d6f2e6f2f4c9629c244eb5f5200d37'\r\n    const _baseOffset = 210\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n    const getCharacter = async (id) => {\r\n\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        console.log(res)\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics)\r\n    } \r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'No description :(',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return {loading,error,clearError,getAllCharacters,getCharacter,getAllComics,getComic,getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const request = useCallback(async (url, method = 'GET',\r\n        body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n            setLoading(true)\r\n\r\n            try {\r\n                const response = await fetch (url, {method, body,headers})\r\n                if(!response.ok){\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n                }\r\n\r\n                const data = await response.json()\r\n                setLoading(false)\r\n                return data\r\n            } catch(e) {\r\n                setLoading(false)\r\n                setError(e.message)\r\n                throw e\r\n            }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null),[])\r\n\r\n    return {loading,request,error,clearError}\r\n}"],"names":["style","display","width","height","objectFit","margin","alt","src","Error","className","avengers","avengersLogo","useState","comicsList","setComicsList","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","onComicsLoaded","newComicsList","ended","length","onRequest","initial","then","useEffect","items","arr","map","item","i","to","id","thumbnail","title","price","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","onClick","Helmet","name","content","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacter","getCharacterByName","console","log","_transformComics","getComic","char","description","slice","path","extension","homepage","urls","wiki","comics","pageCount","language","textObjects","prices"],"sourceRoot":""}